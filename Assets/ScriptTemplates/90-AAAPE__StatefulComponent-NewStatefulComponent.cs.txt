using Unity.Entities;
using AAAPE.DOTS;

public enum #SCRIPTNAME#States {
    UNITITIALIZED = 0,
}

// you only need this when you are using a hybrid-renderer or creating entitys from prefabs
// if you do the PURE ECS (not recommended) way, you can also manually add the #SCRIPTNAME#State shared component to the entity on spawn
[GenerateAuthoringComponent]
public struct #SCRIPTNAME# : StatefulComponent<#SCRIPTNAME#State, #SCRIPTNAME#States>
{
    public #SCRIPTNAME#State state;
    #SCRIPTNAME#State StatefulComponent<#SCRIPTNAME#State, #SCRIPTNAME#States>.State { get => state; set => state =value; }
}

[System.Serializable]
public struct #SCRIPTNAME#State: State<#SCRIPTNAME#States>{
    public #SCRIPTNAME#States Value;

    public static #SCRIPTNAME# With(#SCRIPTNAME#States stateValue) {
        this.Value = stateValue;
    }

#region overriding Equals for EVEN FASTER comparison in query filtering
    public override bool Equals(object obj)
    {
        if(!(obj is #SCRIPTNAME#State)) {
            return false;
        }

        return ((#SCRIPTNAME#State)obj).Value == this.Value;
    }
    
    // override object.GetHashCode
    public override int GetHashCode()
    {
        return Value.GetHashCode();
    }
#endregion
}


// you only need this when you are using a hybrid-renderer or creating entitys from prefabs
// if you do the PURE ECS (not recommended) way, you can also manually add the #SCRIPTNAME#State shared component to the entity on spawn
public class Init#SCRIPTNAME#StateSystem: InitStatefulComponentSystem<#SCRIPTNAME#, #SCRIPTNAME#State, #SCRIPTNAME#States>{}

// if you want to fiddle with the ComponentStates, uncomment this system.
// This will update the #SCRIPTNAME#State Shared Component from #SCRIPTNAME#.State 
// when using hybrid renderer, you can switch the states from within the unity editor
//public class Update#SCRIPTNAME#StateSystem: UpdateStatefulComponentSystem<#SCRIPTNAME#, #SCRIPTNAME#State, #SCRIPTNAME#States>{}